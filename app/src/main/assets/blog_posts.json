[{
  "author": "Anders Poulsen",
  "authorPictureUrl": "https://blog.jayway.com/wp-content/uploads/2014/10/poulsen-150x150.jpg",
  "published": "2017-07-13",
  "text": "<p>On my most recent assignment I was faced with the challenge of downloading a pdf file from an API and displaying it in the browser.<\/p>\r\n<p>Normally, the API would provide a json-object with a link to the pdf, which can then be used to open a new browser tab\/window and the browser or platform takes care of the rest.<\/p>\r\n<p>In this case however the API was designed for native mobile apps and required the presence of a custom &#8216;api-key&#8217; http-header, which made it impossible to just provide the url to the browser.<\/p>\r\n<p>To solve this it was necessary to download the file to memory with an XHR request and then get the browser to open or download it with whatever plugin\/UI it normally uses for pdf file.<\/p>\r\n<p>For the XHR request we use the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Fetch_API\">Fetch API<\/a> with the <a href=\"https:\/\/github.com\/github\/fetch\">whatwg-fetch<\/a> polyfill. In essence the Fetch API fetch() method returns a response, from which a blob can be created. This blob object can be use to create an objectURL, which can then be used as href in a link.<\/p>",
  "title": "How to open a pdf downloaded from an API with JavaScript",
  "url": "https://blog.jayway.com/2017/07/13/open-pdf-downloaded-api-javascript/"
}, {
  "author": "Robert Hedgate",
  "authorPictureUrl": "https://blog.jayway.com/wp-content/uploads/2014/10/213-150x150.jpg",
  "published": "2017-08-08",
  "text": "<p>All controls in UWP has the <em>Loading<\/em>  and <em>Loaded<\/em>  event. They are called when the view is about to show on screen. One would believe that <em>Loading<\/em>  always comes before <em>Loaded  <\/em>but this is not always the case.<\/p>\r\n<p>During my last project we had a bug which was strange and when debugging I found that the <em>Loading<\/em>  event was actually not called at all. <em>Loaded <\/em> is called as expected.<\/p>\r\n<h3>Visibility makes a difference<\/h3>\r\n<p>I was using <em>UserControls <\/em> which was visible or not depending on certain criteria. And after doing some more debugging I found out that if the control has <em>Visibility Hidden  <\/em>during startup the<em> Loading  <\/em>event will not be called. And even more strange is that if the control later becomes visible the <em>Loading<\/em>  event gets called, by then <em>Loaded<\/em>  already has been called making the code which was depending on <em>Loading<\/em>  should be called before <em>Loaded<\/em>  not to work.<\/p>\r\n<h3>Conclusion<\/h3>\r\n<p>Needless to say that I changed how the code ran during startup and all <em>Loading<\/em>  events was removed. But if you must\/want to have code in <em>Loading<\/em>  beware that it will not be called if the control is hidden, but called later when it becomes visible.<\/p>\r\n<p>I tried to find some info on this in the <a href=\"https:\/\/docs.microsoft.com\/en-us\/uwp\/api\/windows.ui.xaml.frameworkelement?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(Windows.UI.Xaml.FrameworkElement.Loading)%3Bk(TargetFrameworkMoniker-.NETCore%2CVersion%3Dv5.0)%3Bk(DevLang-csharp)%26rd%3Dtrue\">help<\/a> but nothing is mention about this there so maybe this blogpost will help someone. If anyone has any info or comment on this please let my know in the comments below.<\/p>",
  "title": "Loading and Loaded in UWP",
  "url": "https://blog.jayway.com/2017/08/08/loading-loaded-uwp/"
}, {
  "author": "Ondrej Bendo",
  "published": "2017-05-10",
  "text": "<p>Usually when you want to interact with smart contracts you need to download the whole ethereum blockchain and keep your local node synchronized. As of writing the blockchain takes up more than 80GB of space on my computer. This might make sense on a desktop computer but is less reasonable on a mobile device.<\/p>\r\n\r\n<p>One way to go around this limitation is to use a service like Infura. Infura allows you to connect to a remote ethereum node and execute transactions without having to worry about maintaining and synchronizing your local node.<\/p>\r\n\r\n<p>To be able to transact with the smart contract from native Java code I used a library called Web3j. Web3j provides you with utilities for generating smart contract java wrappers and a complete implementation of Ethereum&rsquo;s JSON-RPC client API over HTTP and IPC. It provides more features but these were the important ones for this &ldquo;Android Ethereum hello world&rdquo; example.<\/p>\r\n\r\n<p>The example smart contract I want to interact with is a Greeter. It stores a greeting message on the blockchain which can be read or updated. It looks like this:<\/p>\r\n\r\n<p> contract greeter is mortal {  \/* define variable greeting of the type string *\/  string greeting;<\/p>\r\n\r\n<p> \/* this runs when the contract is executed *\/  function greeter(string _greeting) public {  greeting = _greeting;  }<\/p>\r\n\r\n<p> \/* change greeting *\/  function changeGreeting(string _greeting) public {  greeting = _greeting;  }<\/p>\r\n\r\n<p> \/* main function *\/  function greet() constant returns (string) {  return greeting;  } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 contract greeter is mortal {  \/* define variable greeting of the type string *\/  string greeting;    \/* this runs when the contract is executed *\/  function greeter(string _greeting) public {  greeting = _greeting;  }    \/* change greeting *\/  function changeGreeting(string _greeting) public {  greeting = _greeting;  }    \/* main function *\/  function greet() constant returns (string) {  return greeting;  } }  <\/p>\r\n\r\n<p>To be able to create the wrappers we first have to compile this smart contract like so<\/p>\r\n\r\n<p> solc greeter.sol --bin --abi --optimize -o <output-dir>\/ 1 solc greeter.sol --bin --abi --optimize -o <output-dir>\/  <\/p>\r\n\r\n<p>To generate the wrappers you run<\/p>\r\n\r\n<p> web3j solidity generate \/path\/to\/<smart-contract>.bin \/path\/to\/<smart-contract>.abi -o \/path\/to\/src\/main\/java -p com.your.organisation.name 1 web3j solidity generate \/path\/to\/<smart-contract>.bin \/path\/to\/<smart-contract>.abi -o \/path\/to\/src\/main\/java -p com.your.organisation.name  <\/p>\r\n\r\n<p>Java part<\/p>\r\n\r\n<p>First we need to get a web3 instance for the ethereum blockchain interaction. It will look like this<\/p>\r\n\r\n<p> InfuraHttpService infuraHttpService = new InfuraHttpService(url); Web3j web3j = Web3jFactory.build(&quot;https:\/\/ropsten.infura.io\/YOUR_API_KEY&quot;); 1 2 InfuraHttpService infuraHttpService = new InfuraHttpService(url); Web3j web3j = Web3jFactory.build(&quot;https:\/\/ropsten.infura.io\/YOUR_API_KEY&quot;);  <\/p>\r\n\r\n<p>Now we can read from the contract which is almost instantaneous.<\/p>\r\n\r\n<p> Greeter greeter = Greeter.load(greeterContractAddress, web3j, credentials, gasPrice, gasLimit); Future<Utf8String> greeting = greeter.greet(); Utf8String greetingUtf8 = greeting.get(); String result = greetingUtf8.getValue(); 1 2 3 4 Greeter greeter = Greeter.load(greeterContractAddress, web3j, credentials, gasPrice, gasLimit); Future<Utf8String> greeting = greeter.greet(); Utf8String greetingUtf8 = greeting.get(); String result = greetingUtf8.getValue();  <\/p>\r\n\r\n<p>Transactions are not instantaneous and may take a few minutes to be validated.<\/p>\r\n\r\n<p> Greeter greeter = Greeter.load(greeterContractAddress, web3j, credentials, gasPrice, gasLimit); TransactionReceipt transactionReceipt = greeter.changeGreeting(new Utf8String(greetingToWrite)).get(timeout); String result = &quot;Successful transaction. Gas used: &quot; + transactionReceipt.getGasUsed(); 1 2 3 Greeter greeter = Greeter.load(greeterContractAddress, web3j, credentials, gasPrice, gasLimit); TransactionReceipt transactionReceipt = greeter.changeGreeting(new Utf8String(greetingToWrite)).get(timeout); String result = &quot;Successful transaction. Gas used: &quot; + transactionReceipt.getGasUsed();  <\/p>\r\n\r\n<p>Full working example can be found on github.<\/p>",
  "title": "Interacting with Ethereum Smart Contracts from Android",
  "url": "https://blog.jayway.com/2017/08/23/interacting-with-ethereum-smart-contracts-from-android/"
}]